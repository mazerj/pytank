function sortit(pf, templates)
%function sortit(pf, templates)
%
% apply sort templates generated by train() to specified pypefile.
%
% INPUTS
%  pf - pypefile struct from p2mLoad()
%  templates - template struct from train()
%
% OUTPUTS
%  not sure yet..
%

LSE=0;                                  % use template-LSE as sort criterion

[times, volts] = hload(pf);
t0 = times(1);

% test sort.. use a reduced the threshold to see what we
% misclassify.. sometimes it's good to be conservative when
% generating the templates to avoid getting overwhelmed by
% noise, then more permissive during the sort.
vstd = nanstd(volts);

nunits = length(templates.units);
[snips, events] = xsnips(volts, templates.a, templates.b, ...
                         vstd * 0.90 * templates.nsig, ...
                         vstd * templates.art);
snipt = times(events);

if LSE
  % minimal LSE
  scores = zeros([size(snips, 1) nunits]);
  for nu = 1:nunits
    for ns = 1:size(snips, 1)
      % LSE weighted by template STD
      werr = (templates.v(nu,:) - snips(ns, :)) .* templates.ve(nu,:);
      scores(ns, nu) = sum(werr.^2);
    end
  end
  [~, sortcodes] = find(scores == repmat(min(scores, [], 2), ...
                                         [1 nunits]));
else
  scores = snips * templates.v';
  % negative projections are bad..
  %scores(scores < 0) = -Inf;
  %[~, sortcodes] = find(scores == repmat(max(scores, [], 2), [1 nunits]));
  s = (scores == repmat(max(scores, [], 2), [1 nunits]));
  sortcodes = sum(s .* repmat(1:nunits, [size(s,1) 1]), 2);
end

for n = 1:nunits
  subplot(4, nunits, n+0*nunits);
  hist(scores(:,n));
  xrange(min(scores(:)),max(scores(:)));
  set(title(sprintf('%d: n=%d', templates.units(n), sum(sortcodes==n))), ...
            'Color', pcolors(n));
  if n == 1, ylabel('count'); end
  xlabel('score');

  subplot(4, nunits, n+1*nunits);
  ix = find(sortcodes == templates.units(n));
  dt = diff(times(events(ix)));
  hist(dt(dt<=25), 0:25);
  if n == 1, ylabel('count'); end
  xlabel('isi (s)');
  axis tight;
  
  subplot(4, nunits, n+2*nunits);
  eplot(templates.t, ...
        1e6*templates.v(n,:), 1e6*templates.ve(n,:));
  yrange(1e6*min(templates.v(:) - templates.ve(:)), ...
         1e6*max(templates.v(:) + templates.ve(:)));
  hline(0, 'linestyle', '-');
  vline(0, 'linestyle', '-');
  if n == 1, ylabel('uV'); end
  xlabel('time (s)');
end

subplot(4,3,[10 11]);
plot(times-t0, 1e6*volts, 'k');
xlabel('block time (s)');
ylabel('uV');
axis tight;
hold on;
t = templates.t;
for n = 1:length(events)
  set(plot(t + times(events(n)) - t0, 1e6*snips(n, :), ...
           [pcolors(sortcodes(n)) '-']), ...
      'linewidth', 2);
end
hold off;


subplot(4,3,12);
cla;
hold on;
t = templates.t;
for n = 1:nunits
  ix = find(sortcodes == templates.units(n));
  plot(t, 1e6*snips(ix, :), [pcolors(n) '-']);
end
hold off;
xlabel('time (s)');
ylabel('uV');
axis tight;
